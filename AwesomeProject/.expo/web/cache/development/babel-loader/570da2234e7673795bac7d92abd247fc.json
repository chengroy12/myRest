{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/ngcheukfung/myRest/AwesomeProject/screens/OrderScreen.js\";\nimport React, { useState, Component } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Header } from \"react-native-web/dist/index\";\nimport { Avatar, Button, Card, Input, Icon, Text, Overlay } from \"react-native-elements\";\nimport { WebView } from 'react-native-webview';\nimport { place_order, get_product_detail, cancel_order } from \"../services/Api\";\nimport DatePicker from \"react-native-datepicker\";\n\nvar OrderScreen = function (_Component) {\n  _inherits(OrderScreen, _Component);\n\n  function OrderScreen(props) {\n    var _this;\n\n    _classCallCheck(this, OrderScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrderScreen).call(this, props));\n\n    _this.performRefresh = function _callee(id) {\n      var product;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (id === undefined) {\n                id = _this.state.product_id;\n              }\n\n              _this.setState({\n                isLoading: true,\n                refreshing: true\n              });\n\n              console.log(\"In Perform refresh\");\n              console.log(\"id\" + id.toString());\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(get_product_detail(id));\n\n            case 6:\n              product = _context.sent;\n              console.log(product);\n\n              if (product.id !== undefined) {\n                _this.setState({\n                  isLoading: false,\n                  refreshing: false,\n                  selected_product: product\n                });\n              } else {\n                _this.setState({\n                  isLoading: false,\n                  refreshing: false\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.inputQty = function (number) {\n      var product = _this.state.selected_product;\n      var old_total = _this.state.total_amount;\n\n      if (number > product.quantity) {\n        number = product.quantity;\n      }\n\n      if (number != null) {\n        total = number * product.price;\n      }\n\n      _this.setState({\n        order_quantity: number,\n        total_amount: total\n      });\n    };\n\n    _this.onCloseOverlay = function () {\n      _this.setState({\n        isModalVisible: false\n      });\n\n      if (_this.state.selected_product == undefined) {\n        cancel_order(_this.state.payment_token);\n      }\n    };\n\n    _this.onPressSubmit = function () {\n      var _this$state = _this.state,\n          selected_product = _this$state.selected_product,\n          order_quantity = _this$state.order_quantity,\n          total_amount = _this$state.total_amount;\n      console.log(\"current State: \", _this.state);\n\n      if (total_amount == 0 || order_quantity == 0) {\n        Alert.alert('Warning', 'Please input your need', [{\n          text: 'OK'\n        }], {\n          cancelable: false\n        });\n        return;\n      }\n\n      place_order({\n        product_id: selected_product.id,\n        quantity: order_quantity,\n        total_amount: total_amount,\n        deliver_date: _this.state.deliver_date,\n        deliver_time: _this.state.deliver_time,\n        address: _this.state.address\n      }).then(function (response) {\n        if (response.approval_url !== undefined) {\n          _this.setState({\n            selected_product: undefined,\n            order_quantity: 0,\n            total_amount: 0,\n            isModalVisible: true,\n            approval_url: response.approval_url,\n            payment_token: response.payment_token\n          });\n\n          _this.props.navigation.navigate(\"Products\");\n        }\n      });\n    };\n\n    _this.state = {\n      isLoading: true,\n      refreshing: false,\n      order_quantity: 0,\n      product_id: 0,\n      selected_product: undefined,\n      total_amount: 0,\n      isModalVisible: false,\n      approval_url: undefined,\n      payment_token: undefined,\n      deliver_date: \"\",\n      deliver_time: \"\",\n      width: Dimensions.get('window').width,\n      height: Dimensions.get('window').height / 2\n    };\n    return _this;\n  }\n\n  _createClass(OrderScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var product_id = this.props.navigation.getParam(\"product_id\");\n      console.log(\"Entering OrderScreen\");\n      console.log(product_id);\n\n      if (product_id != undefined) {\n        this.setState({\n          product_id: product_id\n        });\n        this.performRefresh(product_id);\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(new_props) {\n      console.log(\"New props\");\n      console.log(new_props);\n      var product_id = new_props.navigation.getParam(\"product_id\");\n      console.log(product_id);\n      console.log(\"....\");\n\n      if (product_id != undefined) {\n        this.setState({\n          product_id: product_id\n        });\n        this.performRefresh(product_id);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selected_product = this.state.selected_product;\n      console.log(selected_product);\n      var deliver_date = this.state.deliver_date;\n      var content_view;\n\n      if (this.state.isLoading) {\n        contentView = React.createElement(View, {\n          style: {\n            flex: 1,\n            padding: 20\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          }\n        }, React.createElement(ActivityIndicator, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          }\n        }));\n      }\n\n      if (selected_product === undefined) {\n        contentView = React.createElement(View, {\n          style: {\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginTop: this.state.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          }\n        }, \" No product selected! \"), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          }\n        }, \" Please select a product from list first! \"));\n      } else {\n        var url = selected_product.picture;\n        contentView = React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          }\n        }, React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          }\n        }, React.createElement(Image, {\n          style: {\n            width: this.state.width,\n            height: this.state.width\n          },\n          source: {\n            uri: selected_product.picture\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          }\n        })), React.createElement(TouchableOpacity, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          }\n        }, React.createElement(Image, {\n          Srouce: require(\"../assets/images/arrow-ios-back.png\"),\n          style: {\n            width: 50,\n            height: 50\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          }\n        })), React.createElement(View, {\n          style: {\n            backgroundColor: \"orange\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          }\n        }, React.createElement(View, {\n          style: style.textContainer01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontSize: 50,\n            color: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          }\n        }, \" \", selected_product.name, \" \"))), React.createElement(View, {\n          style: style.textContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          }\n        }, React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          }\n        }, \"Description: \", selected_product.description), React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          }\n        }, \"Quantity: \", selected_product.quantity), React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          }\n        }, \"Discount: \", selected_product.discount), React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294\n          }\n        }, \"Price: $\", selected_product.price)), React.createElement(View, {\n          style: style.textContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          }\n        }, React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          }\n        }, \"Input Your need\"), React.createElement(Input, {\n          keyboardType: \"numeric\",\n          value: \"\" + this.state.order_quantity,\n          onChangeText: this.inputQty,\n          clearTextOnFocus: true,\n          style: {\n            paddingTop: 50\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298\n          }\n        })), React.createElement(View, {\n          style: style.textContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313\n          }\n        }, React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315\n          }\n        }, \"Input Your Address\"), React.createElement(Input, {\n          keyboardType: \"default\",\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              address: text\n            });\n          },\n          clearTextOnFocus: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          }\n        })), React.createElement(View, {\n          style: style.dateContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          }\n        }, React.createElement(DatePicker, {\n          style: {\n            width: this.state.width,\n            paddingRight: 20\n          },\n          date: this.state.deliver_date,\n          mode: \"date\",\n          placeholder: \"select date\",\n          format: \"YYYY-MM-DD\",\n          minDate: new Date(),\n          maxDate: \"2022-12-31\",\n          confirmDtnText: \"Confirm\",\n          cancelBtnText: \"Cancel\",\n          customStyles: {\n            dateIcon: {\n              position: 'absolute',\n              left: 0,\n              top: 3,\n              marginLeft: 0\n            },\n            dateInput: {\n              marginLeft: 36\n            }\n          },\n          onDateChange: function onDateChange(date) {\n            _this2.setState({\n              deliver_date: date\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326\n          }\n        })), React.createElement(View, {\n          style: style.dateContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358\n          }\n        }, React.createElement(DatePicker, {\n          style: {\n            paddingRight: 20,\n            width: this.state.width\n          },\n          date: this.state.deliver_time,\n          mode: \"time\",\n          placeholder: \"select time\",\n          confirmDtnText: \"Confirm\",\n          cancelBtnText: \"Cancel\",\n          customStyles: {\n            dateIcon: {\n              position: 'absolute',\n              left: 0,\n              top: 4,\n              marginLeft: 0\n            },\n            dateInput: {\n              marginLeft: 36\n            }\n          },\n          onDateChange: function onDateChange(time) {\n            console.log(time);\n\n            _this2.setState({\n              deliver_time: time\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359\n          }\n        })), React.createElement(View, {\n          style: style.textContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395\n          }\n        }, React.createElement(Text, {\n          style: style.text01,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396\n          }\n        }, \"Total Amount: $\", this.state.total_amount)), React.createElement(Button, {\n          title: \"ORDER\",\n          icon: {\n            name: \"payment\"\n          },\n          backgroundColor: \"#03A9F4\",\n          buttonStyle: {\n            borderRadius: 0,\n            marginTop: 100,\n            marginBottom: 60\n          },\n          onPress: this.onPressSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398\n          }\n        })));\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        }\n      }, React.createElement(TouchableOpacity, {\n        title: \"Press me\",\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('Products');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        }\n      }, React.createElement(Image, {\n        style: {\n          height: 40,\n          width: 40\n        },\n        source: require(\"../assets/images/arrow-ios-back.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        }\n      }))), React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        }\n      }, React.createElement(Overlay, {\n        isVisible: this.state.isModalVisible,\n        onRequestClose: this.onCloseOverlay,\n        onBackdropPress: this.onCloseOverlay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        }\n      }, React.createElement(WebView, {\n        source: {\n          uri: this.state.approval_url\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        }\n      })), contentView));\n    }\n  }]);\n\n  return OrderScreen;\n}(Component);\n\nOrderScreen.navigationOptions = {\n  title: \"Order\"\n};\nexport { OrderScreen as default };\n;\nvar style = StyleSheet.create({\n  textContainer: {\n    paddingTop: 10,\n    paddingLeft: 10\n  },\n  textContainer01: {},\n  text01: {\n    fontSize: 20\n  },\n  dateContainer: {\n    paddingRight: 20,\n    paddingTop: 30,\n    paddingLeft: 10\n  }\n});","map":{"version":3,"sources":["/Users/ngcheukfung/myRest/AwesomeProject/screens/OrderScreen.js"],"names":["React","useState","Component","Header","Avatar","Button","Card","Input","Icon","Text","Overlay","WebView","place_order","get_product_detail","cancel_order","DatePicker","OrderScreen","props","performRefresh","id","undefined","state","product_id","setState","isLoading","refreshing","console","log","toString","product","selected_product","inputQty","number","old_total","total_amount","quantity","total","price","order_quantity","onCloseOverlay","isModalVisible","payment_token","onPressSubmit","Alert","alert","text","cancelable","deliver_date","deliver_time","address","then","response","approval_url","navigation","navigate","width","Dimensions","get","height","getParam","new_props","content_view","contentView","flex","padding","alignItems","justifyContent","marginTop","url","picture","flexDirection","uri","require","backgroundColor","style","textContainer01","fontSize","color","name","textContainer","text01","description","discount","paddingTop","dateContainer","paddingRight","Date","dateIcon","position","left","top","marginLeft","dateInput","date","time","borderRadius","marginBottom","navigationOptions","title","StyleSheet","create","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, Component } from \"react\";\nimport {\n    Alert,\n    AsyncStorage,\n    ActivityIndicator,\n    Image,\n    Modal,\n    RefreshControl,\n    ScrollView,\n    StyleSheet,\n    View,\n    //WebView,\n    Dimensions,\n    SafeAreaView,\n    TouchableOpacity,\n    Header\n} from \"react-native\";\nimport {\n    Avatar,\n    Button,\n    Card,\n    Input,\n    Icon,\n    Text,\n    Overlay,\n} from \"react-native-elements\";\nimport { WebView } from 'react-native-webview';\n\nimport { place_order, get_product_detail, cancel_order } from \"../services/Api\";\nimport DatePicker from \"react-native-datepicker\";\n// import DateTimePickerModal from \"react-native-modal-datetime-picker\";\n// import DateTimePicker from '@react-native-community/datetimepicker';\n// import DateTimePicker from '@react-native-community/datetimepicker';\n\nexport default class OrderScreen extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            refreshing: false,\n            order_quantity: 0,\n            product_id: 0,\n            selected_product: undefined,\n            total_amount: 0,\n            isModalVisible: false,\n            approval_url: undefined,\n            payment_token: undefined,\n            deliver_date: \"\",\n            deliver_time: \"\",\n            width: Dimensions.get('window').width,\n            height: Dimensions.get('window').height / 2,\n        };\n    }\n\n    static navigationOptions = {\n        title: \"Order\"\n    };\n\n    // // datepicker \n    // showDateTimePicker = () => {\n    //     this.setState({ isDateTimePickerVisible: true });\n    //   };\n\n    //   hideDateTimePicker = () => {\n    //     this.setState({ isDateTimePickerVisible: false });\n    //   };\n\n    //   handleDatePicked = date => {\n    //     console.log(\"A date has been picked: \", date);\n    //     this.hideDateTimePicker();\n    //   };\n\n\n    ////\n\n    // used for first initialized OrderScreen\n    componentDidMount() {\n        // get selected product id from ProductsScreen\n        // called from navigate('Order', {product_id: item_id}) in ProductsScreen\n        const product_id = this.props.navigation.getParam(\"product_id\");\n        console.log(\"Entering OrderScreen\");\n        console.log(product_id);\n        if (product_id != undefined) {\n            // update the product_id variable in state\n            this.setState({ product_id: product_id });\n            // refresh product detail\n            this.performRefresh(product_id);\n        }\n    }\n\n    // used for everytime users select new product from ProductsScreen\n    componentWillReceiveProps(new_props) {\n        // get the new product_id from ProdcutsScreen\n        // called from navigate('Order', {product_id: item_id}) in ProductsScreen\n        console.log(\"New props\");\n        console.log(new_props);\n        const product_id = new_props.navigation.getParam(\"product_id\");\n        console.log(product_id);\n        console.log(\"....\");\n        if (product_id != undefined) {\n            // update the product_id variable in state\n            this.setState({ product_id: product_id });\n            // refresh product detail\n            this.performRefresh(product_id);\n        }\n    }\n\n\n    // used to refesh product detail from server\n    performRefresh = async (id) => {\n        // get the id from passing arguments\n        // if not found, get it from state.product_id\n        if (id === undefined) {\n            id = this.state.product_id\n        }\n        // set isLoading & refreshing to true for showing ActivityIndicator\n        // known as loading circle\n        this.setState({\n            isLoading: true,\n            refreshing: true\n        });\n        // get updated product detail from server by using get_product_detail()\n        console.log(\"In Perform refresh\");\n        console.log(\"id\" + id.toString());\n        var product = await get_product_detail(id);\n        console.log(product);\n        // if product get successfully from server\n        if (product.id !== undefined) {\n            this.setState({\n                isLoading: false,\n                refreshing: false,\n                selected_product: product\n            });\n        } else {\n            // if product get failure from server\n            this.setState({\n                isLoading: false,\n                refreshing: false,\n            });\n        }\n    };\n\n    // following function is used to when user input qty in textfield\n    inputQty = number => {\n        const product = this.state.selected_product;\n        const old_total = this.state.total_amount;\n\n        if (number > product.quantity) {\n            number = product.quantity;\n        }\n        if (number != null) {\n            total = number * product.price;\n        }\n        // after caculation, update the total amount and order quantity\n        // to state for update UI components\n        this.setState({\n            order_quantity: number,\n            total_amount: total\n        });\n    };\n\n    onCloseOverlay = () => {\n        this.setState({ isModalVisible: false })\n        if (this.state.selected_product == undefined) {\n            cancel_order(this.state.payment_token);\n        }\n    }\n\n    // submit button action\n    onPressSubmit = () => {\n        // get all 3 variable from state\n        // const { selected_product, order_quantity, total_amount, deliver_date } = this.state;\n        const { selected_product, order_quantity, total_amount} = this.state;\n\n        //console.debug(\"Submited orders:\");\n        // console.debug(\n        //     selected_product.id + \":order=\" + order_quantity + \":total_amount=\" + total_amount\n        // );\n        // following checking prevent users no input or invalid input\n        console.log(\"current State: \",this.state);\n        if (total_amount == 0 || order_quantity == 0) {\n            Alert.alert(\n                'Warning',\n                'Please input your need',\n                [\n                    { text: 'OK' },\n                ], { cancelable: false },\n            );\n            // after return, function will terminated\n            return\n        }\n        // place_order() is a function import from servers/api.js\n        /*\n        In api.js:\n            place_order(order)\n        In here:\n            place_order({......})\n        It means:\n            here's {......} will become order in api.js\n            order = {......}, so that we can access these 3 variable in order variable\n            eg:\n                order={\n                    product_id: 1,\n                    quantity: 10,\n                    total_amount: 100\n                }\n        */\n        place_order({\n            product_id: selected_product.id,\n            quantity: order_quantity,\n            total_amount: total_amount,\n            deliver_date: this.state.deliver_date,\n            deliver_time: this.state.deliver_time,\n            address: this.state.address\n            // deliver_date: deliver_date\n        }).then(response => {\n            // using then to handle next operation after received response\n            if (response.approval_url !== undefined) {\n                this.setState({\n                    selected_product: undefined,\n                    order_quantity: 0,\n                    total_amount: 0,\n                    isModalVisible: true,\n                    approval_url: response.approval_url,\n                    payment_token: response.payment_token,\n                });\n                this.props.navigation.navigate(\"Products\")\n            }\n        });\n\n\n    };\n\n    // this is the main function to display a page\n    render() {\n        const selected_product = this.state.selected_product;\n        console.log(selected_product);\n        // const DateTimePicker = require('@react-native-community/datetimepicker');\n        const deliver_date = this.state.deliver_date;\n\n        // const [date, setDate] = useState(new Date(1598051730000));\n        // const [mode, setMode] = useState('date');\n        // const [show, setShow] = useState(false);\n\n        // following means that data is not ready\n        // will display a ActivityIndicator (loading animation)\n        let content_view;\n        if (this.state.isLoading) {\n            contentView = (\n                <View style={{ flex: 1, padding: 20 }}>\n                    <ActivityIndicator />\n                </View>\n            );\n        }\n\n        // If not loading\n        if (selected_product === undefined) {\n            // If selected product is empty, show no product message\n            contentView = (\n                <View style={{ alignItems: \"center\", justifyContent: \"center\", marginTop: this.state.height }}>\n                    <Text> No product selected! </Text>\n                    <Text> Please select a product from list first! </Text>\n                </View>\n            );\n        } else {\n\n            // If selected product is not empty\n            // display detail\n            const url = selected_product.picture;\n            contentView = (\n                \n                <View >\n                    <View style={{ flexDirection: 'column' }}>\n                        <View >\n                            <Image\n                                style={{ width: this.state.width, height: this.state.width }}\n                                source={{ uri: selected_product.picture }}\n\n                            />\n                        </View>\n                        <TouchableOpacity>\n                                <Image Srouce={require(\"../assets/images/arrow-ios-back.png\")} style={{width:50,height:50}}></Image>\n                            </TouchableOpacity>\n                        <View style={{ backgroundColor: \"orange\" }}>\n                            <View style={style.textContainer01}>\n                                <Text style={{ fontSize: 50, color: \"white\" }}> {selected_product.name} </Text>\n                            </View>\n                        </View>\n                        <View style={style.textContainer}>\n                            <Text style={style.text01}>Description: {selected_product.description}</Text>\n                            <Text style={style.text01}>Quantity: {selected_product.quantity}</Text>\n                            <Text style={style.text01}>Discount: {selected_product.discount}</Text>\n                            <Text style={style.text01}>Price: ${selected_product.price}</Text>\n                        </View>\n                        <View style={style.textContainer}>\n                            <Text style={style.text01}>Input Your need</Text>\n                            <Input\n\n                                // containerStyle={{\n                                //     borderWidth: 1, // size/width of the border\n                                //     borderColor: \"lightgrey\", // color of the border\n                                //     marginVertical: 5\n                                // }}\n                                keyboardType=\"numeric\"\n                                value={`${this.state.order_quantity}`}\n                                onChangeText={this.inputQty}\n                                clearTextOnFocus={true} //only work on IOS\n                                style={{ paddingTop: 50 }}\n                            />\n                        </View>\n\n                        <View style={style.textContainer}>\n\n                            <Text style={style.text01}>Input Your Address</Text>\n\n                            <Input\n                                keyboardType=\"default\"\n                                //value={`${this.state.order_quantity}`}\n                                onChangeText={(text)=>{this.setState({address:text})}}\n                                clearTextOnFocus={true} //only work on IOS\n                            \n                            />\n                        </View>\n                        <View style={style.dateContainer}>\n                            <DatePicker\n                                style={{\n                                    width: this.state.width,\n                                    paddingRight: 20,\n\n                                }}\n                                date={this.state.deliver_date}\n                                // date = '2016-05-15'\n                                mode=\"date\"\n                                placeholder=\"select date\"\n                                format=\"YYYY-MM-DD\"\n                                minDate={new Date()}\n                                maxDate=\"2022-12-31\"\n                                confirmDtnText=\"Confirm\"\n                                cancelBtnText=\"Cancel\"\n                                customStyles={{\n                                    dateIcon: {\n                                        position: 'absolute',\n                                        left: 0,\n                                        top: 3,\n                                        marginLeft: 0\n                                    },\n                                    dateInput: {\n                                        marginLeft: 36\n                                    }\n                                }}\n                                onDateChange={(date) => {\n                                    // console.log(date)\n                                    this.setState({ deliver_date: date })\n                                }}\n                            />\n                        </View>\n                        <View style={style.dateContainer}>\n                            <DatePicker\n                                style={{\n                                    paddingRight: 20,\n                                    width: this.state.width,\n\n\n                                }}\n                                date={this.state.deliver_time}\n\n                                mode=\"time\"\n                                placeholder=\"select time\"\n                                // format=\"HH:mm:ss.sss\"\n                                // minDate={this.state.deliver_date}\n                                // maxDate=\"2022-01-02\"\n                                // minDate=\"00:00:00.000\"\n                                // maxDate=\"12:00:00.000\"\n                                confirmDtnText=\"Confirm\"\n                                cancelBtnText=\"Cancel\"\n                                customStyles={{\n                                    dateIcon: {\n                                        position: 'absolute',\n                                        left: 0,\n                                        top: 4,\n                                        marginLeft: 0\n                                    },\n                                    dateInput: {\n                                        marginLeft: 36\n                                    }\n                                }}\n                                onDateChange={(time) => {\n                                    // console.log(date)\n                                    console.log(time);\n                                    this.setState({ deliver_time: time })\n                                }}\n                            />\n                        </View>\n                        <View style={style.textContainer}>\n                            <Text style={style.text01}>Total Amount: ${this.state.total_amount}</Text>\n                        </View>\n                        <Button\n                            title=\"ORDER\"\n                            icon={{ name: \"payment\" }}\n                            backgroundColor=\"#03A9F4\"\n                            buttonStyle={{ borderRadius: 0, marginTop: 100 , marginBottom: 60 }}\n                            onPress={this.onPressSubmit}\n                        />\n                        \n                    </View>\n\n                </View >\n\n            );\n        }\n        // render Order Screen\n        return (\n            \n            <View>\n                <View style={{paddingTop:10}}>\n                <TouchableOpacity title=\"Press me\" onPress={() => this.props.navigation.navigate('Products')} >\n                    <Image style={{ height:40, width: 40 }} source={require(\"../assets/images/arrow-ios-back.png\")} />\n                    </TouchableOpacity>\n                </View>\n                 <ScrollView>\n\n                <Overlay\n                    isVisible={this.state.isModalVisible}\n                    onRequestClose={this.onCloseOverlay}\n                    onBackdropPress={this.onCloseOverlay}\n                >\n                    <WebView source={{ uri: this.state.approval_url }} />\n                </Overlay>\n                    {contentView}\n                    \n\n                </ScrollView>\n                \n            </View>\n        );\n    }\n\n};\nconst style = StyleSheet.create({\n    textContainer: {\n        paddingTop: 10,\n        paddingLeft: 10\n\n    },\n    textContainer01: {\n\n    },\n    text01: {\n        fontSize: 20\n\n    },\n    dateContainer: {\n        paddingRight: 20,\n        paddingTop: 30,\n        \n        paddingLeft: 10\n    }\n\n\n}) \n"]},"metadata":{},"sourceType":"module"}