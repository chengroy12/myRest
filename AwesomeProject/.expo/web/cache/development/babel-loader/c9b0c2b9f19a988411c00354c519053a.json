{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/ngcheukfung/myRest/AwesomeProject/screens/RegisterScreen.js\";\nimport React, { Component } from \"react\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { Button, Input, Icon } from \"react-native-elements\";\nimport { register } from \"../services/Api\";\n\nvar RegisterScreen = function (_Component) {\n  _inherits(RegisterScreen, _Component);\n\n  function RegisterScreen(props) {\n    var _this;\n\n    _classCallCheck(this, RegisterScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RegisterScreen).call(this, props));\n\n    _this.onPressRegister = function _callee() {\n      var _this$state, username, password, password2;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, username = _this$state.username, password = _this$state.password, password2 = _this$state.password2;\n\n              if (!(username == \"\" || password == \"\" || password2 == \"\")) {\n                _context.next = 4;\n                break;\n              }\n\n              _this.setState({\n                isError: true,\n                notMatch: false\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              if (!(password != password2)) {\n                _context.next = 7;\n                break;\n              }\n\n              _this.setState({\n                isError: false,\n                notMatch: true\n              });\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(register(username, password).then(function (response) {\n                if (response.token != undefined) {\n                  AsyncStorage.setItem(\"user_token\", response.token);\n                  AsyncStorage.setItem(\"user_id\", response.user_id.toString());\n                  AsyncStorage.setItem(\"username\", response.username);\n\n                  _this.props.navigation.navigate(\"App\");\n                } else {\n                  _this.setState({\n                    isError: true,\n                    notMatch: false\n                  });\n                }\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.inputUsername = function (value) {\n      _this.setState({\n        username: value\n      });\n    };\n\n    _this.inputPassword = function (value) {\n      _this.setState({\n        password: value\n      });\n    };\n\n    _this.inputPassword2 = function (value) {\n      _this.setState({\n        password2: value\n      });\n    };\n\n    _this.state = {\n      username: \"\",\n      password: \"\",\n      password2: \"\",\n      isError: false,\n      notMatch: false\n    };\n    return _this;\n  }\n\n  _createClass(RegisterScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var navigate = this.props.navigation.navigate;\n      var errorMessage = null;\n\n      if (this.state.isError) {\n        errorMessage = \"All fields cannot be blank!\";\n      } else if (this.state.notMatch) {\n        errorMessage = \"2 passwords must be same! Please verify again!\";\n      }\n\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.container,\n        behavior: \"padding\",\n        enabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        }\n      }, React.createElement(ImageBackground, {\n        source: require(\"../assets/images/login_bg.jpeg\"),\n        style: styles.imageBG,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        }\n      }, React.createElement(ScrollView, {\n        contentContainerStyle: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/images/icon.png\"),\n        style: {\n          resizeMode: \"contain\",\n          width: \"50%\",\n          height: \"50%\",\n          marginBottom: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        }\n      }), React.createElement(Input, {\n        placeholder: \"Your USERNAME\",\n        returnKeyType: \"next\",\n        textContentType: \"username\",\n        containerStyle: styles.inputContainer,\n        inputContainerStyle: styles.inputField,\n        underlineColorAndroid: \"white\",\n        onChangeText: function onChangeText(value) {\n          return _this2.inputUsername(value);\n        },\n        leftIcon: React.createElement(Icon, {\n          name: \"person\",\n          size: 24,\n          color: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }), React.createElement(Input, {\n        placeholder: \"Your PASSWORD\",\n        secureTextEntry: true,\n        returnKeyType: \"go\",\n        textContentType: \"password\",\n        containerStyle: styles.inputContainer,\n        inputContainerStyle: styles.inputField,\n        underlineColorAndroid: \"white\",\n        onChangeText: function onChangeText(value) {\n          return _this2.inputPassword(value);\n        },\n        leftIcon: React.createElement(Icon, {\n          name: \"lock\",\n          size: 24,\n          color: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      }), React.createElement(Input, {\n        placeholder: \"Confirm PASSWORD\",\n        secureTextEntry: true,\n        returnKeyType: \"go\",\n        textContentType: \"password\",\n        containerStyle: styles.inputContainer,\n        inputContainerStyle: styles.inputField,\n        underlineColorAndroid: \"white\",\n        onChangeText: function onChangeText(value) {\n          return _this2.inputPassword2(value);\n        },\n        errorStyle: {\n          color: 'red'\n        },\n        errorMessage: errorMessage,\n        leftIcon: React.createElement(Icon, {\n          name: \"lock\",\n          size: 24,\n          color: \"black\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }), React.createElement(Button, {\n        title: \"Register\",\n        containerStyle: styles.registerButton,\n        textStyle: styles.buttonText,\n        onPress: this.onPressRegister,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        }\n      }), React.createElement(Button, {\n        title: \"Back to Login\",\n        type: \"clear\",\n        onPress: function onPress() {\n          return navigate(\"Login\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        }\n      }))));\n    }\n  }]);\n\n  return RegisterScreen;\n}(Component);\n\nRegisterScreen.navigationOptions = {\n  title: \"Sign Up\"\n};\nexport { RegisterScreen as default };\nvar styles = StyleSheet.create({\n  imageBG: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginVertical: 20\n  },\n  inputContainer: {\n    marginVertical: 5\n  },\n  inputField: {\n    backgroundColor: \"white\",\n    opacity: 0.7,\n    borderRadius: 15\n  },\n  registerButton: {\n    backgroundColor: \"#00acc1\",\n    borderRadius: 15,\n    marginTop: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"sources":["/Users/ngcheukfung/myRest/AwesomeProject/screens/RegisterScreen.js"],"names":["React","Component","Button","Input","Icon","register","RegisterScreen","props","onPressRegister","state","username","password","password2","setState","isError","notMatch","then","response","token","undefined","AsyncStorage","setItem","user_id","toString","navigation","navigate","inputUsername","value","inputPassword","inputPassword2","errorMessage","styles","container","require","imageBG","resizeMode","width","height","marginBottom","inputContainer","inputField","color","registerButton","buttonText","navigationOptions","title","StyleSheet","create","flex","justifyContent","alignItems","marginVertical","backgroundColor","opacity","borderRadius","marginTop","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  AsyncStorage,\n  Image,\n  ImageBackground,\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  KeyboardAvoidingView,\n} from \"react-native\";\nimport {\n  Button,\n  Input,\n  Icon,\n} from \"react-native-elements\";\n\nimport { register } from \"../services/Api\";\n\nexport default class RegisterScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      password2: \"\",\n      isError: false,\n      notMatch: false\n    };\n  }\n\n  static navigationOptions = {\n    title: \"Sign Up\",\n  };\n\n  // onPressRegister function handle Register button pressed\n  onPressRegister = async () => {\n    // get the 3 variables from state\n    const { username, password, password2 } = this.state;\n    // check 3 necessary variable cannot be empty string\n    if (username == \"\" || password == \"\" || password2 == \"\") {\n      this.setState({ isError: true, notMatch: false });\n      return; // if one of them is empty, just return , stop execute the other code\n    }\n    // check 2 passwords input are the same\n    if (password != password2) {\n      this.setState({ isError: false, notMatch: true });\n      return; // if not match just return , stop execute the other code\n    }\n    // call register function from servics/api.js\n    // pass the username and password to handle the register process\n    await register(username, password).then(response => {\n      if (response.token != undefined) {\n        AsyncStorage.setItem(\"user_token\", response.token);\n        AsyncStorage.setItem(\"user_id\", response.user_id.toString());\n        AsyncStorage.setItem(\"username\", response.username);\n        this.props.navigation.navigate(\"App\");\n      } else {\n        this.setState({ isError: true, notMatch: false });\n      }\n    });\n  };\n\n  // username text input handler function\n  inputUsername = value => {\n    this.setState({ username: value });\n  };\n  // password1 text input handler function\n  inputPassword = value => {\n    this.setState({ password: value });\n  };\n  // password2 text input handler function\n  inputPassword2 = value => {\n    this.setState({ password2: value });\n  };\n\n  // main render function to render UI components\n  render() {\n    const { navigate } = this.props.navigation;\n    // get any error, set different error message\n    let errorMessage = null;\n    if (this.state.isError) {\n      errorMessage = \"All fields cannot be blank!\";\n    } else if (this.state.notMatch) {\n      errorMessage = \"2 passwords must be same! Please verify again!\";\n    }\n\n    return (\n      <KeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled>\n      <ImageBackground\n        // using a ImageBackground to render a image in assets folder\n        source={require(\"../assets/images/login_bg.jpeg\")}\n        style={styles.imageBG}\n      >\n        <ScrollView contentContainerStyle={styles.container}>\n          <Image\n            // using an <Imgae> to add a login image\n            source={require(\"../assets/images/icon.png\")}\n            // using direct style assign width: \"50%\", height: \"50%\",\n            style={{\n              resizeMode: \"contain\",\n              width: \"50%\",\n              height: \"50%\",\n              marginBottom: 10\n            }}\n          />\n          <Input\n            placeholder=\"Your USERNAME\"\n            returnKeyType=\"next\"\n            textContentType=\"username\"\n            containerStyle={styles.inputContainer}\n            inputContainerStyle={styles.inputField}\n            underlineColorAndroid=\"white\"\n            onChangeText={value => this.inputUsername(value)}\n            leftIcon={\n              <Icon\n                name='person'\n                size={24}\n                color='black'\n              />\n            }\n          />\n          <Input\n            placeholder=\"Your PASSWORD\"\n            secureTextEntry\n            returnKeyType=\"go\"\n            textContentType=\"password\"\n            containerStyle={styles.inputContainer}\n            inputContainerStyle={styles.inputField}\n            underlineColorAndroid=\"white\"\n            onChangeText={value => this.inputPassword(value)}\n            leftIcon={\n              <Icon\n                name='lock'\n                size={24}\n                color='black'\n              />\n            }\n          />\n          <Input\n            placeholder=\"Confirm PASSWORD\"\n            secureTextEntry\n            returnKeyType=\"go\"\n            textContentType=\"password\"\n            containerStyle={styles.inputContainer}\n            inputContainerStyle={styles.inputField}\n            underlineColorAndroid=\"white\"\n            onChangeText={value => this.inputPassword2(value)}\n            errorStyle={{ color: 'red' }}\n            errorMessage={errorMessage}\n            leftIcon={\n              <Icon\n                name='lock'\n                size={24}\n                color='black'\n              />\n            }\n          />\n          \n          <Button\n            // Register button\n            title=\"Register\"\n            containerStyle={styles.registerButton}\n            textStyle={styles.buttonText}\n            onPress={this.onPressRegister}\n          />\n          <Button\n            // back to LoginScreen button\n            title=\"Back to Login\"\n            type=\"clear\"\n            onPress={() => navigate(\"Login\")}\n          />\n        </ScrollView>\n      </ImageBackground>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  // background image style\n  imageBG: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  // container style\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginVertical: 20\n  },\n  // Following are input fields styles\n  inputContainer: {\n    marginVertical: 5\n  },\n  inputField: {\n    backgroundColor: \"white\",\n    opacity: 0.7,\n    borderRadius: 15\n  },\n  // following are register button styles\n  registerButton: {\n    backgroundColor: \"#00acc1\",\n    borderRadius: 15,\n    marginTop: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n});\n"]},"metadata":{},"sourceType":"module"}